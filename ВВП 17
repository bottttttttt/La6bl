#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <math.h>

int main(void) {
int zzz,n,i,j, K,L,  min,max, a,d;
float x;
int *arr,*A;
printf ("Доброго времени суток\n");

  do{
    printf ("\n\nВведите номер задания (для выхода введите '0') : ");
    scanf ("%d", &zzz);

    switch( zzz )
    {
      case 1: //N первых положительных нечетных чисел
        printf("Введите размер массива: ");
        scanf("%d", &n); 
        if (n<0){ 
            printf ("ээх, давай по новой\n");
            break;
        }
        arr = (int*)malloc(n * sizeof(int)); // Выделение памяти 
        for (i=0; i<n; i++){ //заполняем массив
          printf("arr[%d] = ", i);
          scanf("%d", &arr[i]);
        }
        printf("ведите два числа: ");
        scanf("%d %d", &K,&L); 

        if (K<1||L<1||L>n||K>n){   //проверка условия (1 ≤ K ≤ L ≤ N)
            printf ("ээх, давай по новой\n");
            break;
        }else{
          if (K>L){
            a=K;
            K=L;
            L=a;
          }
        }
        x=0;
        for (i=K-1;i<L;i++) x=x+arr[i];
        x =x/(L-K+1);

        printf("среднее арифметическое элементов от arr[%d] до arr[%d] = %.2f ",arr[K-1],arr[L-1], x); 
              
        break;

      case 2:
      printf("Введите размер массива: ");
      scanf("%d", &n); 
      if (n<0){ 
            printf ("ээх, давай по новой\n");
            break;
      }
      arr = (int*)malloc(n * sizeof(int)); // Выделение памяти 
      for (i=0; i<n; i++){ //заполняем массив
          printf("arr[%d] = ", i);
          scanf("%d", &arr[i]);
      }
      a = arr[n-1]-arr[n-2];
      for (i=1; i<n; i++){ //заполняем массив
          if(arr[i]!=arr[i-1]+a){
            printf("элементы массива arr не образуют арифметическую прогрессию");
            i=n;
          }else{
            if(arr[n-1]==arr[i-1]+a) printf("элементы массива arr образуют арифметическую прогрессию с шагом %d",a);
          }
      }
      
                
         break;

      case 3: 
      printf("Введите размер массива: ");
      scanf("%d", &n); 
      if (n<0){ 
            printf ("ээх, давай по новой\n");
            break;
      }
      A = (int*)malloc(n * sizeof(int)); // Выделение памяти 
      for (i=0; i<n; i++){ //заполняем массив
          printf("A[%d] = ", i);
          scanf("%d", &A[i]);
      }
    min = A[0]; //0 же тоже четное??
    for (i = 2; i < n ; i+=2)
    if (A[i] < min) {
      min = A[i];
      K=i;
    }

    printf ("минимальный элемент из его элементов с четными номерами:\nA[%d] = %d",K,min);
    
      break;

      case 4: 
      printf("Введите размер массива: ");
      scanf("%d", &n); 
      if (n<0){ 
            printf ("ээх, давай по новой\n");
            break;
      }
      A = (int*)malloc(n * sizeof(int)); // Выделение памяти 
      for (i=0; i<n; i++){ //заполняем массив
          printf("A[%d] = ", i);
          scanf("%d", &A[i]);
      }
      
      K=0;
      if (A[0]>A[1]) max=A[0]; else max=0;

      for (i=1; i<n-1; i++){ 
        if (A[i]>A[i-1] && A[i]>A[i-1]){
          max = A[i];
          K = i;
        }
      }

      if (A[n-1]>A[n-2] && A[n-1]>max){
        max= A[n-1];
        K=n-1;
      }
      printf ("последний локальный максимум:\nA[%d] = %d",K,max);

          break;

      case 5:
      printf("Введите размер массива: ");
      scanf("%d", &n); 
      if (n<0){ 
            printf ("ээх, давай по новой\n");
            break;
      }
      A = (int*)malloc(n * sizeof(int)); // Выделение памяти 
      for (i=0; i<n; i++){ //заполняем массив
          printf("A[%d] = ", i);
          scanf("%d", &A[i]);
      } 

      for(j=0; j<n-1;j++){
        K= A[j];
        L= j;
        for (i=j+1; i<n; i++){ 
        if (K==A[i]){
          K = i;
          i=n;
          j=n;
          }
        }
      }

      printf ("номера одинаковых элементов %d и %d",L,K);

          break;
        

      case 0:      
          printf ("пока\n");
          break;

      default:
          printf( "Неправильный ввод.\n" );       
    }
    
  }while(zzz!=0);

return 0;
}
